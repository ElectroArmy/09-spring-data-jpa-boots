/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/11.0.15
 * Generated at: 2023-06-01 09:31:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class home_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("file:/Users/arkarkyaw/.m2/repository/org/glassfish/web/jakarta.servlet.jsp.jstl/3.0.1/jakarta.servlet.jsp.jstl-3.0.1.jar", Long.valueOf(1684570926096L));
    _jspx_dependants.put("jar:file:/Users/arkarkyaw/.m2/repository/org/glassfish/web/jakarta.servlet.jsp.jstl/3.0.1/jakarta.servlet.jsp.jstl-3.0.1.jar!/META-INF/c.tld", Long.valueOf(1664430078000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>JDC | Portal</title>\n");
      out.write("\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/includes/resources.jsp", out, false);
      out.write("\n");
      out.write("\n");
      out.write("	\n");
      out.write("	<!-- Text CSS -->\n");
      out.write("	<style>\n");
      out.write("            \n");
      out.write("            /*basic reset */\n");
      out.write("            \n");
      out.write("            *{\n");
      out.write("                margin: 0;\n");
      out.write("                padding: 0;\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            body {background: black;}\n");
      out.write("            canvas {display:block;}\n");
      out.write("        \n");
      out.write("        </style>\n");
      out.write("        \n");
      out.write("        \n");
      out.write("	\n");
      out.write("	<!-- Added For Main Page With Word Affect -->\n");
      out.write("	<style>\n");
      out.write("        .name {\n");
      out.write("            text-decoration: none;\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        @-moz-keyframes roll {\n");
      out.write("            100% {\n");
      out.write("                -moz-transform: rotate(360deg);\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        @-o-keyframes roll {\n");
      out.write("            100% {\n");
      out.write("                -o-transform: rotate(360deg);\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        @-webkit-keyframes roll {\n");
      out.write("            100% {\n");
      out.write("                -webkit-transform: rotate(360deg);\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        body {\n");
      out.write("            -moz-animation-name: roll;\n");
      out.write("            -moz-animation-duration: 4s;\n");
      out.write("            -moz-animation-iteration-count: 1;\n");
      out.write("            -o-animation-name: roll;\n");
      out.write("            -o-animation-duration: 4s;\n");
      out.write("            -o-animation-iteration-count: 1;\n");
      out.write("            -webkit-animation-name: roll;\n");
      out.write("            -webkit-animation-duration: 4s;\n");
      out.write("            -webkit-animation-iteration-count: 1;\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        .dt {\n");
      out.write("            text-align: center;\n");
      out.write("            color: #000000;\n");
      out.write("            padding: 3px;\n");
      out.write("            font-weight: bold;\n");
      out.write("            font-size: 90px;\n");
      out.write("            background-color: #8C0000;\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        .newclass {\n");
      out.write("            background: rgb(19, 108, 131) url(\"http://www.picgifs.com/graphics/f/fireworks/graphics-fireworks-966914.gif\") repeat;\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        .imgs {\n");
      out.write("            opacity: 0.5;\n");
      out.write("            float: right;\n");
      out.write("            width: 150px;\n");
      out.write("            height: 150px;\n");
      out.write("            cursor: pointer;\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        .imgs:hover {\n");
      out.write("            opacity: 1;\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        .bh {\n");
      out.write("            background: #FFFFFF;\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("    \n");
      out.write("    <style type=\"text/css\">\n");
      out.write("        /* Circle Text Styles */\n");
      out.write("        \n");
      out.write("        #outerCircleText {\n");
      out.write("            /* Optional - DO NOT SET FONT-SIZE HERE, SET IT IN THE SCRIPT */\n");
      out.write("            font-style: italic;\n");
      out.write("            font-weight: bold;\n");
      out.write("            font-family: 'comic sans ms', verdana, arial;\n");
      out.write("            color: #f633ff;\n");
      out.write("            /* End Optional */\n");
      out.write("            /* Start Required - Do Not Edit */\n");
      out.write("            position: absolute;\n");
      out.write("            top: 0;\n");
      out.write("            left: 0;\n");
      out.write("            z-index: 3000;\n");
      out.write("            cursor: default;\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        #outerCircleText div {\n");
      out.write("            position: relative;\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        #outerCircleText div div {\n");
      out.write("            position: absolute;\n");
      out.write("            top: 0;\n");
      out.write("            left: 0;\n");
      out.write("            text-align: center;\n");
      out.write("        }\n");
      out.write("        /* End Required */\n");
      out.write("        /* End Circle Text Styles */\n");
      out.write("    </style>\n");
      out.write("\n");
      out.write("\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/includes/top-menu.jsp", out, false);
      out.write("\n");
      out.write("\n");
      out.write("	<!-- <div class=\"container mt-4\">\n");
      out.write("	\n");
      out.write("		<h3>JDC Main</h3>\n");
      out.write("	\n");
      out.write("	</div> -->\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	<canvas id=\"c\"></canvas>\n");
      out.write("	\n");
      out.write("	<!-- Text Effect -->\n");
      out.write("\n");
      out.write("        <script>\n");
      out.write("        // geting canvas by id c\n");
      out.write("        var c = document.getElementById(\"c\");\n");
      out.write("        var ctx = c.getContext(\"2d\");\n");
      out.write("\n");
      out.write("        //making the canvas full screen\n");
      out.write("        c.height = window.innerHeight;\n");
      out.write("        c.width = window.innerWidth;\n");
      out.write("\n");
      out.write("        //chinese characters - taken from the unicode charset\n");
      out.write("        var matrix = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ123456789@#$%^&*()*&^%\";\n");
      out.write("        //converting the string into an array of single characters\n");
      out.write("        matrix = matrix.split(\"\");\n");
      out.write("\n");
      out.write("        var font_size = 10;\n");
      out.write("        var columns = c.width/font_size; //number of columns for the rain\n");
      out.write("        //an array of drops - one per column\n");
      out.write("        var drops = [];\n");
      out.write("        //x below is the x coordinate\n");
      out.write("        //1 = y co-ordinate of the drop(same for every drop initially)\n");
      out.write("        for(var x = 0; x < columns; x++)\n");
      out.write("            drops[x] = 1; \n");
      out.write("\n");
      out.write("        //drawing the characters\n");
      out.write("        function draw()\n");
      out.write("        {\n");
      out.write("            //Black BG for the canvas\n");
      out.write("            //translucent BG to show trail\n");
      out.write("            ctx.fillStyle = \"rgba(0, 0, 0, 0.04)\";\n");
      out.write("            ctx.fillRect(0, 0, c.width, c.height);\n");
      out.write("\n");
      out.write("            ctx.fillStyle = \"#0F0\"; //green text\n");
      out.write("            ctx.font = font_size + \"px arial\";\n");
      out.write("            //looping over drops\n");
      out.write("            for(var i = 0; i < drops.length; i++)\n");
      out.write("            {\n");
      out.write("                //a random chinese character to print\n");
      out.write("                var text = matrix[Math.floor(Math.random()*matrix.length)];\n");
      out.write("                //x = i*font_size, y = value of drops[i]*font_size\n");
      out.write("                ctx.fillText(text, i*font_size, drops[i]*font_size);\n");
      out.write("\n");
      out.write("                //sending the drop back to the top randomly after it has crossed the screen\n");
      out.write("                //adding a randomness to the reset to make the drops scattered on the Y axis\n");
      out.write("                if(drops[i]*font_size > c.height && Math.random() > 0.975)\n");
      out.write("                    drops[i] = 0;\n");
      out.write("\n");
      out.write("                //incrementing Y coordinate\n");
      out.write("                drops[i]++;\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        setInterval(draw, 35);\n");
      out.write("\n");
      out.write("        \n");
      out.write("        </script>\n");
      out.write("	\n");
      out.write("	\n");
      out.write(" \n");
      out.write("\n");
      out.write("    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js\"></script>\n");
      out.write("\n");
      out.write("    <script type=\"text/javascript\">\n");
      out.write("        /*<![CDATA[*/\n");
      out.write("        jQuery(document).ready(function() {\n");
      out.write("            jQuery(\".rblikebox\").hover(function() {\n");
      out.write("                jQuery(this).stop().animate({\n");
      out.write("                    right: \"0\"\n");
      out.write("                }, \"medium\");\n");
      out.write("            }, function() {\n");
      out.write("                jQuery(this).stop().animate({\n");
      out.write("                    right: \"-250\"\n");
      out.write("                }, \"medium\");\n");
      out.write("            }, 500);\n");
      out.write("        }); /*]]>*/\n");
      out.write("    </script>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("    <script type=\"text/javascript\">\n");
      out.write("        ;\n");
      out.write("        (function() {\n");
      out.write("            var msg = \"Republic of Burma\";\n");
      out.write("            var size = 24;\n");
      out.write("            var circleY = 0.75;\n");
      out.write("            var circleX = 2;\n");
      out.write("            var letter_spacing = 5;\n");
      out.write("            var diameter = 10;\n");
      out.write("            var rotation = 0.4;\n");
      out.write("            var speed = 0.3;\n");
      out.write("            ////////////////////// Stop Editing ////////////////////// \n");
      out.write("            if (!window.addEventListener && !window.attachEvent || !document.createElement) return;\n");
      out.write("            msg = msg.split('');\n");
      out.write("            var n = msg.length - 1,\n");
      out.write("                a = Math.round(size * diameter * 0.208333),\n");
      out.write("                currStep = 20,\n");
      out.write("                ymouse = a * circleY + 20,\n");
      out.write("                xmouse = a * circleX + 20,\n");
      out.write("                y = [],\n");
      out.write("                x = [],\n");
      out.write("                Y = [],\n");
      out.write("                X = [],\n");
      out.write("                o = document.createElement('div'),\n");
      out.write("                oi = document.createElement('div'),\n");
      out.write("                b = document.compatMode && document.compatMode != \"BackCompat\" ? document.documentElement : document.body,\n");
      out.write("                mouse = function(e) {\n");
      out.write("                    e = e || window.event;\n");
      out.write("                    ymouse = !isNaN(e.pageY) ? e.pageY : e.clientY; // y-position\n");
      out.write("                    xmouse = !isNaN(e.pageX) ? e.pageX : e.clientX; // x-position\n");
      out.write("                },\n");
      out.write("                makecircle = function() { // rotation/positioning\n");
      out.write("                    if (init.nopy) {\n");
      out.write("                        o.style.top = (b || document.body).scrollTop + 'px';\n");
      out.write("                        o.style.left = (b || document.body).scrollLeft + 'px';\n");
      out.write("                    };\n");
      out.write("                    currStep -= rotation;\n");
      out.write("                    for (var d, i = n; i > -1; --i) { // makes the circle\n");
      out.write("                        d = document.getElementById('iemsg' + i).style;\n");
      out.write("                        d.top = Math.round(y[i] + a * Math.sin((currStep + i) / letter_spacing) * circleY - 15) + 'px';\n");
      out.write("                        d.left = Math.round(x[i] + a * Math.cos((currStep + i) / letter_spacing) * circleX) + 'px';\n");
      out.write("                    };\n");
      out.write("                },\n");
      out.write("                drag = function() { // makes the resistance\n");
      out.write("                    y[0] = Y[0] += (ymouse - Y[0]) * speed;\n");
      out.write("                    x[0] = X[0] += (xmouse - 20 - X[0]) * speed;\n");
      out.write("                    for (var i = n; i > 0; --i) {\n");
      out.write("                        y[i] = Y[i] += (y[i - 1] - Y[i]) * speed;\n");
      out.write("                        x[i] = X[i] += (x[i - 1] - X[i]) * speed;\n");
      out.write("                    };\n");
      out.write("                    makecircle();\n");
      out.write("                },\n");
      out.write("                init = function() { // appends message divs, & sets initial values for positioning arrays\n");
      out.write("                    if (!isNaN(window.pageYOffset)) {\n");
      out.write("                        ymouse += window.pageYOffset;\n");
      out.write("                        xmouse += window.pageXOffset;\n");
      out.write("                    } else init.nopy = true;\n");
      out.write("                    for (var d, i = n; i > -1; --i) {\n");
      out.write("                        d = document.createElement('div');\n");
      out.write("                        d.id = 'iemsg' + i;\n");
      out.write("                        d.style.height = d.style.width = a + 'px';\n");
      out.write("                        d.appendChild(document.createTextNode(msg[i]));\n");
      out.write("                        oi.appendChild(d);\n");
      out.write("                        y[i] = x[i] = Y[i] = X[i] = 0;\n");
      out.write("                    };\n");
      out.write("                    o.appendChild(oi);\n");
      out.write("                    document.body.appendChild(o);\n");
      out.write("                    setInterval(drag, 25);\n");
      out.write("                },\n");
      out.write("                ascroll = function() {\n");
      out.write("                    ymouse += window.pageYOffset;\n");
      out.write("                    xmouse += window.pageXOffset;\n");
      out.write("                    window.removeEventListener('scroll', ascroll, false);\n");
      out.write("                };\n");
      out.write("\n");
      out.write("            o.id = 'outerCircleText';\n");
      out.write("            o.style.fontSize = size + 'px';\n");
      out.write("            if (window.addEventListener) {\n");
      out.write("                window.addEventListener('load', init, false);\n");
      out.write("                document.addEventListener('mouseover', mouse, false);\n");
      out.write("                document.addEventListener('mousemove', mouse, false);\n");
      out.write("                if (/Apple/.test(navigator.vendor))\n");
      out.write("                    window.addEventListener('scroll', ascroll, false);\n");
      out.write("            } else if (window.attachEvent) {\n");
      out.write("                window.attachEvent('onload', init);\n");
      out.write("                document.attachEvent('onmousemove', mouse);\n");
      out.write("            };\n");
      out.write("        })();\n");
      out.write("    </script>\n");
      out.write("\n");
      out.write("\n");
      out.write("    \n");
      out.write("    <br />\n");
      out.write("    <font color=\"gray\" face=\"COURIER new\" size=\"8\">\n");
      out.write("        <center>\n");
      out.write("            <script>\n");
      out.write("                farbbibliothek = new Array();\n");
      out.write("                farbbibliothek[0] = new Array(\"#FF0000\", \"#FF1100\", \"#FF2200\", \"#FF3300\", \"#FF4400\", \"#FF5500\", \"#FF6600\", \"#FF7700\", \"#FF8800\", \"#FF9900\", \"#FFaa00\", \"#FFbb00\", \"#FFcc00\", \"#FFdd00\", \"#FFee00\", \"#FFff00\", \"#FFee00\", \"#FFdd00\", \"#FFcc00\", \"#FFbb00\", \"#FFaa00\", \"#FF9900\", \"#FF8800\", \"#FF7700\", \"#FF6600\", \"#FF5500\", \"#FF4400\", \"#FF3300\", \"#FF2200\", \"#FF1100\");\n");
      out.write("                farbbibliothek[1] = new Array(\"#00FF00\", \"#000000\", \"#00FF00\", \"#00FF00\");\n");
      out.write("                farbbibliothek[2] = new Array(\"#00FF00\", \"#FF0000\", \"#00FF00\", \"#00FF00\", \"#00FF00\", \"#00FF00\", \"#00FF00\", \"#00FF00\", \"#00FF00\", \"#00FF00\", \"#00FF00\", \"#00FF00\", \"#00FF00\", \"#00FF00\", \"#00FF00\", \"#00FF00\", \"#00FF00\", \"#00FF00\", \"#00FF00\", \"#00FF00\", \"#00FF00\", \"#00FF00\", \"#00FF00\", \"#00FF00\", \"#00FF00\", \"#00FF00\", \"#00FF00\", \"#00FF00\", \"#00FF00\", \"#00FF00\", \"#00FF00\", \"#00FF00\", \"#00FF00\", \"#00FF00\", \"#00FF00\", \"#00FF00\");\n");
      out.write("                farbbibliothek[3] = new Array(\"#FF0000\", \"#FF4000\", \"#FF8000\", \"#FFC000\", \"#FFFF00\", \"#C0FF00\", \"#80FF00\", \"#40FF00\", \"#00FF00\", \"#00FF40\", \"#00FF80\", \"#00FFC0\", \"#00FFFF\", \"#00C0FF\", \"#0080FF\", \"#0040FF\", \"#0000FF\", \"#4000FF\", \"#8000FF\", \"#C000FF\", \"#FF00FF\", \"#FF00C0\", \"#FF0080\", \"#FF0040\");\n");
      out.write("                farbbibliothek[4] = new Array(\"#FF0000\", \"#EE0000\", \"#DD0000\", \"#CC0000\", \"#BB0000\", \"#AA0000\", \"#990000\", \"#880000\", \"#770000\", \"#660000\", \"#550000\", \"#440000\", \"#330000\", \"#220000\", \"#110000\", \"#000000\", \"#110000\", \"#220000\", \"#330000\", \"#440000\", \"#550000\", \"#660000\", \"#770000\", \"#880000\", \"#990000\", \"#AA0000\", \"#BB0000\", \"#CC0000\", \"#DD0000\", \"#EE0000\");\n");
      out.write("                farbbibliothek[5] = new Array(\"#000000\", \"#000000\", \"#000000\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\");\n");
      out.write("                farbbibliothek[6] = new Array(\"#0000FF\", \"#FFFF00\");\n");
      out.write("                farben = farbbibliothek[4];\n");
      out.write("\n");
      out.write("                function farbschrift() {\n");
      out.write("                    for (var i = 0; i < Buchstabe.length; i++) {\n");
      out.write("                        document.all[\"a\" + i].style.color = farben[i];\n");
      out.write("                    }\n");
      out.write("                    farbverlauf();\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                function string2array(text) {\n");
      out.write("                    Buchstabe = new Array();\n");
      out.write("                    while (farben.length < text.length) {\n");
      out.write("                        farben = farben.concat(farben);\n");
      out.write("                    }\n");
      out.write("                    k = 0;\n");
      out.write("                    while (k <= text.length) {\n");
      out.write("                        Buchstabe[k] = text.charAt(k);\n");
      out.write("                        k++;\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                function divserzeugen() {\n");
      out.write("                    for (var i = 0; i < Buchstabe.length; i++) {\n");
      out.write("                        document.write(\"<font face='monotype corsiva' size=30><span id='a\" + i + \"' class='a\" + i + \"'>\" + Buchstabe[i] + \"</span></font>\");\n");
      out.write("                    }\n");
      out.write("                    farbschrift();\n");
      out.write("                }\n");
      out.write("                var a = 1;\n");
      out.write("\n");
      out.write("                function farbverlauf() {\n");
      out.write("                    for (var i = 0; i < farben.length; i++) {\n");
      out.write("                        farben[i - 1] = farben[i];\n");
      out.write("                    }\n");
      out.write("                    farben[farben.length - 1] = farben[-1];\n");
      out.write("\n");
      out.write("                    setTimeout(\"farbschrift()\", 30);\n");
      out.write("                }\n");
      out.write("                var farbsatz = 1;\n");
      out.write("\n");
      out.write("                function farbtauscher() {\n");
      out.write("                    farben = farbbibliothek[farbsatz];\n");
      out.write("                    while (farben.length < text.length) {\n");
      out.write("                        farben = farben.concat(farben);\n");
      out.write("                    }\n");
      out.write("                    farbsatz = Math.floor(Math.random() * (farbbibliothek.length - 0.0001));\n");
      out.write("                }\n");
      out.write("                setInterval(\"farbtauscher()\", 5000);\n");
      out.write("                text = \"Better than Others, Harder than Ever\";\n");
      out.write("            </script><span class=\"newclass\">\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("string2array(text); \n");
      out.write("divserzeugen();\n");
      out.write("</script></span>\n");
      out.write("\n");
      out.write("\n");
      out.write("    \n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
